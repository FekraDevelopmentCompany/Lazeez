using Pranzo.Entities.Model;
using Pranzo.Helper;
using Pranzo.Model.DBModel;
using Pranzo.Model.ViewModel;
using Pranzo.Repository.UnitOfWork;
using Pranzo.Service.Infrastructure;
using System.Linq;

namespace Pranzo.Service.Service
{
    public class MealExceptionService : BaseService<lkp_MealException, MealException>
    {
        public MealExceptionService(UnitOfWork unitOfWork)
        {
            this.unitOfWork = unitOfWork;
            repository = unitOfWork.Repository<lkp_MealException>();
        }

        #region BaseService Operations

        public override void Delete(int id)
        {
            // TODO Custom Code
            // Delete RestaurantMealException
            var restaurantMealExceptionService = unitOfWork.Service<RestaurantMealExceptionService>();
            restaurantMealExceptionService.Delete(r => r.MealExceptionID == id);

            base.Delete(id);
        }

        #endregion

        #region Business Operations

        /// <summary>
        /// Search in lkp_MealException By Name
        /// </summary>
        /// <param name="prms"></param>
        /// <returns></returns>
        public JQueryDataTables<MasterDataSearch> Search(MasterDataSearchParams prms)
        {
            // Parameters
            var ignoreName = string.IsNullOrEmpty(prms.Name);

            var mealExceptions = (from mealExeption in repository.Table
                                  where mealExeption.IsDeleted == false
                                     && (ignoreName || mealExeption.Name.Contains(prms.Name))
                                  select new MasterDataSearch
                                  {
                                      ID = mealExeption.ID,
                                      Name = mealExeption.Name,
                                      Description = mealExeption.Description
                                  })
                                  .OrderBy(prms.OrderBy);

            return new JQueryDataTables<MasterDataSearch>
            {
                iTotalRecords = mealExceptions.Count(),
                iTotalDisplayRecords = mealExceptions.Count(),
                aaData = mealExceptions.Skip(prms.iDisplayStart).Take(prms.iDisplayLength).ToList()
            };
        }

        #endregion
    }
}