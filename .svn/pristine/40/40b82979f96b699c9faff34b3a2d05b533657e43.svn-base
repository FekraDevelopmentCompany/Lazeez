using System.Linq;
using Pranzo.Entities.Model;
using Pranzo.Repository.UnitOfWork;
using Pranzo.Service.Infrastructure;
using Pranzo.Model.DBModel;
using Pranzo.Helper;
using Pranzo.Model.ViewModel;
using System.Collections.Generic;

namespace Pranzo.Service.Service
{
    public class RestaurantMealService : BaseService<tbl_RestaurantMeal, RestaurantMeal>
    {
        public RestaurantMealService(UnitOfWork unitOfWork)
        {
            this.unitOfWork = unitOfWork;
            repository = unitOfWork.Repository<tbl_RestaurantMeal>();
        }

        #region BaseService Operations


        #endregion

        #region Business Operations

        public JQueryDataTables<RestaurantMealSearch> Search(RestaurantMealSearchParams prms)
        {
            // Parameters
            bool ignoreName = string.IsNullOrEmpty(prms.Name);
            bool ignoreMealException = !prms.RestaurantMealExceptionID.HasValue;
            List<int> MealExceptionFilteration = new List<int>();

            if (!ignoreMealException)
            {
                MealExceptionFilteration = unitOfWork.Repository<tbl_RestaurantMealException>().Table.Where(x => x.MealExceptionID == prms.RestaurantMealExceptionID).Select(y => y.RestaurantMealID).ToList();
            }

            List<RestaurantMealSearch> restaurantMeals = (from restMeal in repository.Table
                                                          where restMeal.IsDeleted == false
                                                             && restMeal.RestaurantID == prms.RestaurantID
                                                             && (ignoreName || restMeal.Name.Contains(prms.Name))
                                                             && (ignoreMealException || MealExceptionFilteration.Contains(restMeal.ID))
                                                          select new RestaurantMealSearch
                                                          {
                                                              ID = restMeal.ID,
                                                              Name = restMeal.Name,
                                                              Calories = restMeal.Calories,
                                                              Cost = restMeal.Cost,
                                                              NumberOfPerson = restMeal.NumberOfPersons,
                                                              Temperature = restMeal.Temperature,
                                                              TimeOfMeal = restMeal.TimeOfMeal
                                                          })
                                    .OrderBy(prms.OrderBy)
                                    .ToList();

            return new JQueryDataTables<RestaurantMealSearch>
            {
                iTotalRecords = restaurantMeals.Count,
                iTotalDisplayRecords = restaurantMeals.Count,
                aaData = restaurantMeals.Skip(prms.iDisplayStart).Take(prms.iDisplayLength).ToList()
            };
        }

        #endregion
    }
}
