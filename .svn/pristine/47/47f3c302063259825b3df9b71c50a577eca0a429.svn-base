/*!
 * ClockPicker v0.0.7 (http://weareoutman.github.io/clockpicker/)
 * Copyright 2014 Wang Shenwei.
 * Licensed under MIT (https://github.com/weareoutman/clockpicker/blob/master/LICENSE)
 */
!function () { function t(t) { return document.createElementNS(r, t) } function i(t) { return (10 > t ? "0" : "") + t } function e(t) { var i = ++f + ""; return t ? t + i : i } function s(s, n) { function r(t, i) { var e = h.offset(), s = /^touch/.test(t.type), c = e.left + b, r = e.top + b, l = (s ? t.originalEvent.touches[0] : t).pageX - c, u = (s ? t.originalEvent.touches[0] : t).pageY - r, m = Math.sqrt(l * l + u * u), f = !1; if (!i || !(v - w > m || m > v + w)) { t.preventDefault(); var g = setTimeout(function () { o.addClass("clockpicker-moving") }, 200); p && h.append(H.canvas), H.setHand(l, u, !i, !0), a.off(k).on(k, function (t) { t.preventDefault(); var i = /^touch/.test(t.type), e = (i ? t.originalEvent.touches[0] : t).pageX - c, s = (i ? t.originalEvent.touches[0] : t).pageY - r; (f || e !== l || s !== u) && (f = !0, H.setHand(e, s, !1, !0)) }), a.off(d).on(d, function (t) { a.off(d), t.preventDefault(); var e = /^touch/.test(t.type), s = (e ? t.originalEvent.changedTouches[0] : t).pageX - c, p = (e ? t.originalEvent.changedTouches[0] : t).pageY - r; (i || f) && s === l && p === u && H.setHand(s, p), "hours" === H.currentView ? H.toggleView("minutes", M / 2) : n.autoclose && (H.minutesView.addClass("clockpicker-dial-out"), setTimeout(function () { H.done() }, M / 2)), h.prepend(U), clearTimeout(g), o.removeClass("clockpicker-moving"), a.off(k) }) } } var l = c(A), h = l.find(".clockpicker-plate"), m = l.find(".clockpicker-hours"), f = l.find(".clockpicker-minutes"), T = l.find(".clockpicker-am-pm-block"), V = "INPUT" === s.prop("tagName"), P = V ? s : s.find("input"), C = s.find(".input-group-addon"), H = this; if (this.id = e("cp"), this.element = s, this.options = n, this.isAppended = !1, this.isShown = !1, this.currentView = "hours", this.isInput = V, this.input = P, this.addon = C, this.popover = l, this.plate = h, this.hoursView = m, this.minutesView = f, this.amPmBlock = T, this.spanHours = l.find(".clockpicker-span-hours"), this.spanMinutes = l.find(".clockpicker-span-minutes"), this.spanAmPm = l.find(".clockpicker-span-am-pm"), this.amOrPm = "PM", n.twelvehour) { var x = ['<div class="clockpicker-am-pm-block">', '<button type="button" class="btn btn-sm btn-default clockpicker-button clockpicker-am-button">', "AM</button>", '<button type="button" class="btn btn-sm btn-default clockpicker-button clockpicker-pm-button">', "PM</button>", "</div>"].join(""), E = (c(x), isArabicUI()); E ? (c('<button type="button" class="btn btn-sm btn-default clockpicker-button pm-button">ص</button>').on("click", function () { H.amOrPm = " ص", c(".clockpicker-span-am-pm").empty().append(" ص") }).appendTo(this.amPmBlock), c('<button type="button" class="btn btn-sm btn-default clockpicker-button am-button">م</button>').on("click", function () { H.amOrPm = " م", c(".clockpicker-span-am-pm").empty().append(" م") }).appendTo(this.amPmBlock)) : (c('<button type="button" class="btn btn-sm btn-default clockpicker-button am-button">AM</button>').on("click", function () { H.amOrPm = " AM", c(".clockpicker-span-am-pm").empty().append(" AM") }).appendTo(this.amPmBlock), c('<button type="button" class="btn btn-sm btn-default clockpicker-button pm-button">PM</button>').on("click", function () { H.amOrPm = " PM", c(".clockpicker-span-am-pm").empty().append(" PM") }).appendTo(this.amPmBlock)) } n.autoclose || c('<button type="button" class="btn btn-sm btn-default btn-block clockpicker-button">' + n.donetext + "</button>").click(c.proxy(this.done, this)).appendTo(l), "top" !== n.placement && "bottom" !== n.placement || "top" !== n.align && "bottom" !== n.align || (n.align = "left"), "left" !== n.placement && "right" !== n.placement || "left" !== n.align && "right" !== n.align || (n.align = "top"), l.addClass(n.placement), l.addClass("clockpicker-align-" + n.align), this.spanHours.click(c.proxy(this.toggleView, this, "hours")), this.spanMinutes.click(c.proxy(this.toggleView, this, "minutes")), P.on("focus.clockpicker click.clockpicker", c.proxy(this.show, this)), C.on("click.clockpicker", c.proxy(this.toggle, this)); var I, S, B, D = c('<div class="clockpicker-tick"></div>'); if (n.twelvehour) for (I = 1; 13 > I; I += 1) { S = D.clone(), B = I / 6 * Math.PI; var O = v; S.css("font-size", "120%"), S.css({ left: b + Math.sin(B) * O - w, top: b - Math.cos(B) * O - w }), S.html(0 === I ? "00" : I), m.append(S), S.on(u, r) } else for (I = 0; 24 > I; I += 1) { S = D.clone(), B = I / 6 * Math.PI; var z = I > 0 && 13 > I, O = z ? g : v; S.css({ left: b + Math.sin(B) * O - w, top: b - Math.cos(B) * O - w }), z && S.css("font-size", "120%"), S.html(0 === I ? "00" : I), m.append(S), S.on(u, r) } for (I = 0; 60 > I; I += 5) S = D.clone(), B = I / 30 * Math.PI, S.css({ left: b + Math.sin(B) * v - w, top: b - Math.cos(B) * v - w }), S.css("font-size", "120%"), S.html(i(I)), f.append(S), S.on(u, r); if (h.on(u, function (t) { 0 === c(t.target).closest(".clockpicker-tick").length && r(t, !0) }), p) { var U = l.find(".clockpicker-canvas"), j = t("svg"); j.setAttribute("class", "clockpicker-svg"), j.setAttribute("width", y), j.setAttribute("height", y); var L = t("g"); L.setAttribute("transform", "translate(" + b + "," + b + ")"); var W = t("circle"); W.setAttribute("class", "clockpicker-canvas-bearing"), W.setAttribute("cx", 0), W.setAttribute("cy", 0), W.setAttribute("r", 2); var N = t("line"); N.setAttribute("x1", 0), N.setAttribute("y1", 0); var X = t("circle"); X.setAttribute("class", "clockpicker-canvas-bg"), X.setAttribute("r", w); var Y = t("circle"); Y.setAttribute("class", "clockpicker-canvas-fg"), Y.setAttribute("r", 3.5), L.appendChild(N), L.appendChild(X), L.appendChild(Y), L.appendChild(W), j.appendChild(L), U.append(j), this.hand = N, this.bg = X, this.fg = Y, this.bearing = W, this.g = L, this.canvas = U } } var o, c = window.jQuery, n = c(window), a = c(document), r = "http://www.w3.org/2000/svg", p = "SVGAngle" in window && function () { var t, i = document.createElement("div"); return i.innerHTML = "<svg/>", t = (i.firstChild && i.firstChild.namespaceURI) == r, i.innerHTML = "", t }(), l = function () { var t = document.createElement("div").style; return "transition" in t || "WebkitTransition" in t || "MozTransition" in t || "msTransition" in t || "OTransition" in t }(), h = "ontouchstart" in window, u = "mousedown" + (h ? " touchstart" : ""), k = "mousemove.clockpicker" + (h ? " touchmove.clockpicker" : ""), d = "mouseup.clockpicker" + (h ? " touchend.clockpicker" : ""), m = navigator.vibrate ? "vibrate" : navigator.webkitVibrate ? "webkitVibrate" : null, f = 0, b = 100, v = 80, g = 54, w = 13, y = 2 * b, M = l ? 350 : 1, A = ['<div class="popover clockpicker-popover">', '<div class="arrow"></div>', '<div class="popover-title">', '<span class="clockpicker-span-hours text-primary"></span>', '<span class="clockpicker-span-sign">:</span>', '<span class="clockpicker-span-minutes"></span>', '<span class="clockpicker-span-am-pm"></span>', "</div>", '<div class="popover-content">', '<div class="clockpicker-plate">', '<div class="clockpicker-canvas"></div>', '<div class="clockpicker-dial clockpicker-hours"></div>', '<div class="clockpicker-dial clockpicker-minutes clockpicker-dial-out"></div>', "</div>", '<span class="clockpicker-am-pm-block">', "</span>", "</div>", "</div>"].join(""); s.DEFAULTS = { "default": "", fromnow: 0, placement: "bottom", align: "left", donetext: "Done", autoclose: !1, twelvehour: !1, vibrate: !0 }, s.prototype.toggle = function () { this[this.isShown ? "hide" : "show"]() }, s.prototype.locate = function () { var t = this.element, i = this.popover, e = t.offset(), s = t.outerWidth(), o = t.outerHeight(), c = this.options.placement, n = this.options.align, a = {}; switch (i.show(), c) { case "bottom": a.top = e.top + o; break; case "right": a.left = e.left + s; break; case "top": a.top = e.top - i.outerHeight(); break; case "left": a.left = e.left - i.outerWidth() } switch (n) { case "left": a.left = e.left; break; case "right": a.left = e.left + s - i.outerWidth(); break; case "top": a.top = e.top; break; case "bottom": a.top = e.top + o - i.outerHeight() } i.css(a) }, s.prototype.show = function (t) { if (!this.isShown) { var e = this; this.isAppended || (o = c(document.body).append(this.popover), n.on("resize.clockpicker" + this.id, function () { e.isShown && e.locate() }), this.isAppended = !0); var s = ((this.input.prop("value") || this.options["default"] || "") + "").split(":"); if ("now" === s[0]) { var r = new Date(+new Date + this.options.fromnow); s = [r.getHours(), r.getMinutes()] } this.hours = +s[0] || 0, this.minutes = +s[1] || 0, this.spanHours.html(i(this.hours)), this.spanMinutes.html(i(this.minutes)), this.toggleView("hours"), this.locate(), this.isShown = !0, a.on("click.clockpicker." + this.id + " focusin.clockpicker." + this.id, function (t) { var i = c(t.target); 0 === i.closest(e.popover).length && 0 === i.closest(e.addon).length && 0 === i.closest(e.input).length && e.hide() }), a.on("keyup.clockpicker." + this.id, function (t) { 27 === t.keyCode && e.hide() }) } }, s.prototype.hide = function () { this.isShown = !1, a.off("click.clockpicker." + this.id + " focusin.clockpicker." + this.id), a.off("keyup.clockpicker." + this.id), this.popover.hide() }, s.prototype.toggleView = function (t, i) { var e = "hours" === t, s = e ? this.hoursView : this.minutesView, o = e ? this.minutesView : this.hoursView; this.currentView = t, this.spanHours.toggleClass("text-primary", e), this.spanMinutes.toggleClass("text-primary", !e), o.addClass("clockpicker-dial-out"), s.css("visibility", "visible").removeClass("clockpicker-dial-out"), this.resetClock(i), clearTimeout(this.toggleViewTimer), this.toggleViewTimer = setTimeout(function () { o.css("visibility", "hidden") }, M) }, s.prototype.resetClock = function (t) { var i = this.currentView, e = this[i], s = "hours" === i, o = Math.PI / (s ? 6 : 30), c = e * o, n = s && e > 0 && 13 > e ? g : v, a = Math.sin(c) * n, r = -Math.cos(c) * n, l = this; p && t ? (l.canvas.addClass("clockpicker-canvas-out"), setTimeout(function () { l.canvas.removeClass("clockpicker-canvas-out"), l.setHand(a, r) }, t)) : this.setHand(a, r) }, s.prototype.setHand = function (t, e, s, o) { var n, a = Math.atan2(t, -e), r = "hours" === this.currentView, l = Math.PI / (r || s ? 6 : 30), h = Math.sqrt(t * t + e * e), u = this.options, k = r && (v + g) / 2 > h, d = k ? g : v; if (u.twelvehour && (d = v), 0 > a && (a = 2 * Math.PI + a), n = Math.round(a / l), a = n * l, u.twelvehour ? r ? 0 === n && (n = 12) : (s && (n *= 5), 60 === n && (n = 0)) : r ? (12 === n && (n = 0), n = k ? 0 === n ? 12 : n : 0 === n ? 0 : n + 12) : (s && (n *= 5), 60 === n && (n = 0)), this[this.currentView] !== n && m && this.options.vibrate && (this.vibrateTimer || (navigator[m](10), this.vibrateTimer = setTimeout(c.proxy(function () { this.vibrateTimer = null }, this), 100))), this[this.currentView] = n, this[r ? "spanHours" : "spanMinutes"].html(i(n)), !p) return void this[r ? "hoursView" : "minutesView"].find(".clockpicker-tick").each(function () { var t = c(this); t.toggleClass("active", n === +t.html()) }); o || !r && n % 5 ? (this.g.insertBefore(this.hand, this.bearing), this.g.insertBefore(this.bg, this.fg), this.bg.setAttribute("class", "clockpicker-canvas-bg clockpicker-canvas-bg-trans")) : (this.g.insertBefore(this.hand, this.bg), this.g.insertBefore(this.fg, this.bg), this.bg.setAttribute("class", "clockpicker-canvas-bg")); var f = Math.sin(a) * d, b = -Math.cos(a) * d; this.hand.setAttribute("x2", f), this.hand.setAttribute("y2", b), this.bg.setAttribute("cx", f), this.bg.setAttribute("cy", b), this.fg.setAttribute("cx", f), this.fg.setAttribute("cy", b) }, s.prototype.done = function () { this.hide(); var t = this.input.prop("value"), e = i(this.hours) + ":" + i(this.minutes); this.options.twelvehour && (e += this.amOrPm), this.input.prop("value", e), e !== t && (this.input.triggerHandler("change"), this.isInput || this.element.trigger("change")), this.options.autoclose && this.input.trigger("blur") }, s.prototype.remove = function () { this.element.removeData("clockpicker"), this.input.off("focus.clockpicker click.clockpicker"), this.addon.off("click.clockpicker"), this.isShown && this.hide(), this.isAppended && (n.off("resize.clockpicker" + this.id), this.popover.remove()) }, c.fn.clockpicker = function (t) { var i = Array.prototype.slice.call(arguments, 1); return this.each(function () { var e = c(this), o = e.data("clockpicker"); if (o) "function" == typeof o[t] && o[t].apply(o, i); else { var n = c.extend({}, s.DEFAULTS, e.data(), "object" == typeof t && t); e.data("clockpicker", new s(e, n)) } }) } }();